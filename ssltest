#!/bin/bash
SCRIPT_DIR=$(cd $(dirname $0);pwd -P)
SCRIPT_PATH=$SCRIPT_DIR/$(basename $0)
TEST_CMD="curl -s -o /dev/null"
TEST_CENTOS4=0
TEST_CENTOS5=0
TEST_CENTOS6=0
CACHE_TIME_MINUTE=1440
OPENSSL_FILE=/usr/bin/openssl
CA_CERTIFICATES_FILE=/etc/pki/tls/certs/ca-bundle.crt

: ${DOCKER_PULL:=0}
: ${VERBOSE:=0}
: ${NO_DOCKER:=0}
: ${UPGRADE_CA_CERTIFICATES:=0}
: ${UPGRADE_OPENSSL:=0}
: ${CACHE_DIR:=$SCRIPT_DIR/cache}


usage () {
	/bin/cat <<END
usage: `basename $0` [-CcOpv456] URL
  v         : verbose mode
  p         : pull docker images
  c version : centos version (cf. 5.11, 6.7, ...)
  C         : use with c option. upgrade ca-certificates. it can't use with -O.
  O         : use with c option. upgrade openssl. it can't use with -C.
  4         : test centos4
  5         : test centos5
  6         : test centos6

See https://github.com/ywatase/ssltest
END
	exit 0
}

ssltest () {
  while getopts '456Cc:Opv?' opt
  do
    case $opt in
      4) TEST_CENTOS4=1
        ;;
      5) TEST_CENTOS5=1
        ;;
      6) TEST_CENTOS6=1
        ;;
      v) VERBOSE=1
        ;;
      p) DOCKER_PULL=1
        ;;
      c) CENTOS_VERSION=$OPTARG
        ;;
      C) UPGRADE_CA_CERTIFICATES=1
        ;;
      O) UPGRADE_OPENSSL=1
        ;;
      \?) usage
		;;
      *) usage
        ;;
    esac
  done
  shift `expr $OPTIND - 1`
  if [ `expr 0 + $TEST_CENTOS4 + $TEST_CENTOS5 + $TEST_CENTOS6` = 0 ] ; then
	  TEST_CENTOS5=1
	  TEST_CENTOS6=1
  fi
  if [ -z $CENTOS_VERSION ] && [ $UPGRADE_CA_CERTIFICATES = 1 -o $UPGRADE_OPENSSL = 1 ] ; then
	  echo -C or -O option was set without -c or env:CENTOS_VERSION.
	  exit 1
  fi
  if [ $UPGRADE_CA_CERTIFICATES = 1 -a $UPGRADE_OPENSSL = 1 ] ; then
	  echo -C and -O options are set. >&2
	  exit 2
  fi


  for url in "$@"
  do
	  _ssltest $url
  done
}


pp () {
	local centos=$1
	local pkgs="$2"
	local test_cmd="$3"
	local fmt=$(printf 'centos:%-4s / %-32s : %s' $centos "$pkgs" '%s\n')
	$test_cmd
	RET=$?
	[ "$RET" = 0 ] \
		&& printf "$fmt" OK \
		&& true \
		&& return
	printf "$fmt" NG
	if [ "$VERBOSE" = 1 ] ; then
		echo -n curl:
		curl_exit_code | grep -E "^\($RET\)"
	fi
	false
}

_docker_test () {
	local URL=$1
	local Ver=$2

	if [ $DOCKER_PULL = 1 ] ; then
		docker pull ywatase/centos:$Ver > /dev/null 2>&1
	fi
	[ -d $CACHE_DIR ] || mkdir $CACHE_DIR
	docker run --rm -t \
		-e CENTOS_VERSION=$Ver \
		-e INSTALL_PKGS=$INSTALL_PKGS \
		-e NO_DOCKER=1 \
		-e VERBOSE=$VERBOSE \
		-e DOCKER_PULL=$DOCKER_PULL \
		-e UPGRADE_OPENSSL=$UPGRADE_OPENSSL \
		-e UPGRADE_CA_CERTIFICATES=$UPGRADE_CA_CERTIFICATES \
		-e LATEST=$LATEST \
		-e CACHE_DIR=/root/cache \
		-v $SCRIPT_PATH:/root/$(basename $SCRIPT_PATH) \
		-v $SCRIPT_DIR/cache:/root/cache\
		ywatase/centos:$Ver /bin/bash /root/$(basename $SCRIPT_PATH) $URL
}

_raw_test () {
	local URL=$1
	local _TEST_CMD="$TEST_CMD $URL"
	if [ -n "$INSTALL_PKGS" ] ; then
		arch=$(rpm -q centos-release --qf "%{arch}")
		if [ -e $CACHE_DIR/"$INSTALL_PKGS".rpm ] ; then
			rpm -U $CACHE_DIR/"$INSTALL_PKGS".rpm 2>/dev/null
		elif curl -sfqLO http://vault.centos.org/$CENTOS_VERSION/updates/$arch/Packages/"$INSTALL_PKGS".rpm \
			|| curl -sfqLO http://vault.centos.org/$CENTOS_VERSION/updates/$arch/RPMS/"$INSTALL_PKGS".rpm  ; then
		    rpm -U ${INSTALL_PKGS}.rpm 2>/dev/null
		    mv ${INSTALL_PKGS}.rpm $CACHE_DIR
		else
			yum install -y -q $INSTALL_PKGS
		fi
	fi
	pp $CENTOS_VERSION "$(rpm -qf $OPENSSL_FILE | head -n 1) / $(rpm -qf $CA_CERTIFICATES_FILE | head -n 1)" "$_TEST_CMD"
	return
}

provided () {
	local file=$1
	local pkg=$(rpm -qf $file --qf='%{name}-%{version}-%{release}')
	local arch=$(rpm -qf $file --qf '%{arch}')
	repoquery --whatprovides "$file" --qf '%{name}-%{version}-%{release}' \
		| grep -vxF "$pkg" | sort | uniq | sed -e "s/$/.$arch/"
}

cached_provided () {
	local file=$1
	local pkg=$(rpm -qf $file --qf '%{name}')
	local provided_cache_file=$CACHE_DIR/provided_p_${pkg}_v${CENTOS_VERSION}.cache
	touch -t `date --date "$CACHE_TIME_MINUTE  minutes ago" +%Y%m%d%H%M.%S` $CACHE_DIR/timestamp
	if [ -n $provided_cache_file -a $provided_cache_file -nt $CACHE_DIR/timestamp ] ; then
		cat $provided_cache_file
	else
		provided $file | tee $provided_cache_file
	fi
}

_ssltest () {
	local URL=$1
	if [ $CENTOS_VERSION ] ; then
		if [ $NO_DOCKER = 1 ] ; then
			if [ "$LATEST" = 1 -o "$UPGRADE_OPENSSL" = 1 ] ; then
				cached_provided $OPENSSL_FILE | while read Ver
				do
					INSTALL_PKGS=$Ver _raw_test $URL && break
				done
			elif [ "$UPGRADE_CA_CERTIFICATES" = 1 ] ; then
				cached_provided $CA_CERTIFICATES_FILE | while read Ver
				do
					INSTALL_PKGS=$Ver _raw_test $URL && break
				done
			else
				_raw_test $URL
			fi
		else
			_docker_test $URL $CENTOS_VERSION
		fi
		return
	fi

	[ $TEST_CENTOS4 = 1 ] && _search_centos_version $URL 4 9 4
	[ $TEST_CENTOS5 = 1 ] && _search_centos_version $URL 5 11 2
	[ $TEST_CENTOS6 = 1 ] && _search_centos_version $URL 6 8 1
}

_search_centos_version () {
	local URL=$1
	local major=$2
	local minor_max=$3
	local minor_min=$4
	local PASS_LATEST=0
	_docker_test $URL $major.$minor_max && PASS_LATEST=1
	if [ $PASS_LATEST = 1 ] ; then
		for Ver in $(eval echo $major.{$minor_min..$minor_max})
		do
			_docker_test $URL $Ver && break
		done
	else
		LATEST=1 _docker_test $URL $major.$minor_max
	fi

}

curl_exit_code () {
	cat <<END
(1)      Unsupported protocol. This build of curl has no support for this protocol.
(2)      Failed to initialize.
(3)      URL malformed. The syntax was not correct.
(4)      A feature or option that was needed to perform the desired request was not enabled or was explicitly disabled at build-time.
(5)      Couldn't resolve proxy. The given proxy host could not be resolved.
(6)      Couldn't resolve host. The given remote host was not resolved.
(7)      Failed to connect to host.
(8)      FTP weird server reply. The server sent data curl couldn't parse.
(9)      FTP access denied. The server denied login or denied access to the particular resource or directory you wanted to reach.
(11)     FTP weird PASS reply. Curl couldn't parse the reply sent to the PASS request.
(13)     FTP weird PASV reply, Curl couldn't parse the reply sent to the PASV request.
(14)     FTP weird 227 format. Curl couldn't parse the 227-line the server sent.
(15)     FTP can't get host. Couldn't resolve the host IP we got in the 227-line.
(17)     FTP couldn't set binary. Couldn't change transfer method to binary.
(18)     Partial file. Only a part of the file was transferred.
(19)     FTP couldn't download/access the given file, the RETR (or similar) command failed.
(21)     FTP quote error. A quote command returned error from the server.
(22)     HTTP page not retrieved. The requested url was not found or returned another error with the HTTP error code being 400 or above.
(23)     Write error. Curl couldn't write data to a local filesystem or similar.
(25)     FTP couldn't STOR file. The server denied the STOR operation, used for FTP uploading.
(26)     Read error. Various reading problems.
(27)     Out of memory. A memory allocation request failed.
(28)     Operation timeout. The specified time-out period was reached according to the conditions.
(30)     FTP PORT failed. The PORT command failed. Not all FTP servers support the PORT command, try doing a transfer using PASV instead!
(31)     FTP couldn't use REST. The REST command failed. This command is used for resumed FTP transfers.
(33)     HTTP range error. The range "command" didn't work.
(34)     HTTP post error. Internal post-request generation error.
(35)     SSL connect error. The SSL handshaking failed.
(36)     FTP bad download resume. Couldn't continue an earlier aborted download.
(37)     FILE couldn't read file. Failed to open the file. Permissions?
(38)     LDAP cannot bind. LDAP bind operation failed.
(39)     LDAP search failed.
(41)     Function not found. A required LDAP function was not found.
(42)     Aborted by callback. An application told curl to abort the operation.
(43)     Internal error. A function was called with a bad parameter.
(45)     Interface error. A specified outgoing interface could not be used.
(47)     Too many redirects. When following redirects, curl hit the maximum amount.
(48)     Unknown option specified to libcurl. This indicates that you passed a weird option to curl that was passed on to libcurl and rejected.
(49)     Malformed telnet option.
(51)     The peer's SSL certificate or SSH MD5 fingerprint was not OK.
(52)     The server didn't reply anything, which here is considered an error.
(53)     SSL crypto engine not found.
(54)     Cannot set SSL crypto engine as default.
(55)     Failed sending network data.
(56)     Failure in receiving network data.
(58)     Problem with the local certificate.
(59)     Couldn't use specified SSL cipher.
(60)     Peer certificate cannot be authenticated with known CA certificates.
(61)     Unrecognized transfer encoding.
(62)     Invalid LDAP URL.
(63)     Maximum file size exceeded.
(64)     Requested FTP SSL level failed.
(65)     Sending the data requires a rewind that failed.
(66)     Failed to initialise SSL Engine.
(67)     The user name, password, or similar was not accepted and curl failed to log in.
(68)     File not found on TFTP server.
(69)     Permission problem on TFTP server.
(70)     Out of disk space on TFTP server.
(71)     Illegal TFTP operation.
(72)     Unknown TFTP transfer ID.
(73)     File already exists (TFTP).
(74)     No such user (TFTP).
(75)     Character conversion failed.
(76)     Character conversion functions required.
(77)     Problem with reading the SSL CA cert (path? access rights?).
(78)     The resource referenced in the URL does not exist.
(79)     An unspecified error occurred during the SSH session.
(80)     Failed to shut down the SSL connection.
(82)     Could not load CRL file, missing or wrong format (added in 7.19.0).
(83)     Issuer check failed (added in 7.19.0).
(84)     The FTP PRET command failed
(85)     RTSP: mismatch of CSeq numbers
(86)     RTSP: mismatch of Session Identifiers
(87)     unable to parse FTP file list
(88)     FTP chunk callback reported error
END
}

ssltest "$@"
